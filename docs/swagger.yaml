basePath: /
definitions:
  dto.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  dto.HealthResponse:
    properties:
      details: {}
      status:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterRequest:
    properties:
      allergic_drugs:
        type: string
      allergic_food:
        type: string
      birth_date:
        description: Will be parsed to time.Time
        type: string
      chronic_disease:
        type: string
      display_name:
        type: string
      email:
        type: string
      emergency_contact:
        type: string
      food_preferences:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.UserResponse:
    properties:
      activities:
        type: string
      allergic_drugs:
        type: string
      allergic_food:
        type: string
      avatar_url:
        type: string
      birth_date:
        type: string
      chronic_disease:
        type: string
      created_at:
        type: string
      display_name:
        type: string
      email:
        type: string
      emergency_contact:
        type: string
      food_categories:
        type: string
      food_preferences:
        type: string
      id:
        type: string
      phone:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Go2gether Backend API for travel companion matching
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go2gether Backend API
  version: "1.0"
paths:
  /api/auth/google/callback:
    get:
      consumes:
      - application/json
      description: Handle Google OAuth callback with authorization code
      parameters:
      - description: Authorization code from Google
        in: query
        name: code
        required: true
        type: string
      - description: State parameter for CSRF protection
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Invalid authorization code
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Google OAuth callback
      tags:
      - authentication
  /api/auth/google/login:
    get:
      consumes:
      - application/json
      description: Initiate Google OAuth login flow
      produces:
      - application/json
      responses:
        "200":
          description: Google OAuth URL
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Google OAuth login
      tags:
      - authentication
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login user
      tags:
      - authentication
  /api/auth/profile:
    get:
      consumes:
      - application/json
      description: Get the current authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - authentication
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with username, email, and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - authentication
  /healthz:
    get:
      consumes:
      - application/json
      description: Basic health check endpoint
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            $ref: '#/definitions/dto.HealthResponse'
      summary: Health check
      tags:
      - health
  /livez:
    get:
      consumes:
      - application/json
      description: Process liveness check endpoint
      produces:
      - application/json
      responses:
        "200":
          description: Process is alive
          schema:
            $ref: '#/definitions/dto.HealthResponse'
      summary: Liveness check
      tags:
      - health
  /readyz:
    get:
      consumes:
      - application/json
      description: Readiness check endpoint including database connectivity
      produces:
      - application/json
      responses:
        "200":
          description: Service is ready
          schema:
            $ref: '#/definitions/dto.HealthResponse'
        "503":
          description: Service is degraded
          schema:
            $ref: '#/definitions/dto.HealthResponse'
      summary: Readiness check
      tags:
      - health
schemes:
- http
- https
swagger: "2.0"
